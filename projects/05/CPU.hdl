// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // From figure 5.9
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    And(a=cInstruction, b=instruction[5], out=writeA);
    And(a=cInstruction, b=instruction[4], out=writeD);
    And(a=cInstruction, b=instruction[3], out=writeM);

    // Register A will be filled from either the instruction line or the ALU
    Mux16(b=instruction, a=alu, sel=aInstruction, out=regA);

    // Only read 15 bits of memory address in register A
    Or(a=aInstruction, b=writeA, out=setA);
    Register(in=regA, in[15]=false, load=setA, out[0..14]=addressM, out=A);

    // D register is loaded from the ALU when d2 is set
    Register(in=alu, load=writeD, out=D);

    And(a=cInstruction, b=instruction[12], out=aComp);

    // ALU uses A or M based on the a bit.
    Mux16(a=A, b=inM, sel=aComp, out=AM);

    // ALU control bits are mapped directly in C instructions when in c mode.
    And(a=cInstruction, b=instruction[11], out=c1);
    And(a=cInstruction, b=instruction[10], out=c2);
    And(a=cInstruction, b=instruction[9], out=c3);
    And(a=cInstruction, b=instruction[8], out=c4);
    And(a=cInstruction, b=instruction[7], out=c5);
    And(a=cInstruction, b=instruction[6], out=c6);
    ALU(x=D, y=AM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=alu, out=outM, zr=zr, ng=ng);

    Jump(jump=instruction[0..2], ng=ng, zr=zr, jmp=jmpi);
    And(a=jmpi, b=cInstruction, out=jmp);
    PC(in=A, load=jmp, reset=reset, inc=true, out[0..14]=pc);
}